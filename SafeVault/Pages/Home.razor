@page "/home"
@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations
@using SafeVault.Classes
@using SafeVault.Shared
@inject HttpClient HttpClient

<h3>User Input Form</h3>

<EditForm Model="@formData" OnValidSubmit="@HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div>
        <label for="username">Username:</label>
        <InputText id="username" @bind-Value="@formData.Username" />
        <ValidationMessage For="@(() => formData.Username)" />
    </div>

    <div>
        <label for="email">Email:</label>
        <InputText id="email" type="email" @bind-Value="@formData.Email" />
        <ValidationMessage For="@(() => formData.Email)" />
    </div>

    <button type="submit">Submit</button>
</EditForm>

@if (!string.IsNullOrEmpty(resultMessage))
{
    <p>@resultMessage</p>
}

@if (userInfo != null)
{
    <p><strong>Fetched User Info:</strong></p>
    <p>Username: @userInfo.Username</p>
    <p>Email: @userInfo.Email</p>
}

@code {
    private FormData formData = new();
    private string resultMessage;
    private User userInfo;

    private async Task HandleValidSubmit()
    {
        try
        {
            userInfo = null;
            // Sanitize inputs
            formData.Username = InputSanitizer.SanitizeInput(formData.Username);

            // Make HTTP GET request to API
            var response = await HttpClient.GetAsync($"http://localhost:5299/api/users/{formData.Username}");

            if (response.IsSuccessStatusCode)
            {
                userInfo = await response.Content.ReadFromJsonAsync<User>();
                resultMessage = "User information fetched successfully!";
            }
            else if (response.StatusCode == System.Net.HttpStatusCode.NotFound)
            {
                resultMessage = "User not found.";
            }
            else
            {
                resultMessage = "An error occurred while fetching the user data.";
            }
            // Clear form fields
            formData = new FormData();
        }
        catch (Exception ex)
        {
            resultMessage = $"An error occurred: {ex.Message}";
            // Clear form fields
            formData = new FormData();
        }
    }


    public class FormData
    {
        [Required(ErrorMessage = "Username is required")]
        [MinLength(3, ErrorMessage = "Username must be at least 3 characters long")]
        public string Username { get; set; }

        [Required(ErrorMessage = "Email is required")]
        [EmailAddress(ErrorMessage = "Invalid email address")]
        public string Email { get; set; }
    }
}